%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2380 1575
%%HiResBoundingBox: 0 0 2379.1199 1574.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2379.1199 1574.88 re
W
q
[0.24 0 0 -0.24 0 1574.88] cm
q
0 0 9909.375 6562.5 re
W*
q
[26.782095 0 0 26.785656 267.82095 267.8634] cm
/DeviceRGB {} CS
[0.8 0.0549 0.0549] SC
/DeviceRGB {} cs
[0.8 0.0549 0.0549] sc
0 220 350 5 re
f
Q
q
[229.67656 0 0 229.70712 2637.9316 -941.05121] cm
/DeviceRGB {} CS
[0.0392 0.0392 0.0392] SC
/DeviceRGB {} cs
[0.0392 0.0392 0.0392] sc
2.8209 11.9118 m
4.9733 11.9118 l
4.9733 8.074901 l
2.2728 8.074901 l
2.82093 8.489341 l
2.82093 11.91184 l
2.8209 11.9118 l
h
6.8048 7.299 m
6.8048 12.7001 l
6.8048 13.44876 6.22993 14.0236 5.4813 14.0236 c
5.22729 14.0236 l
6.804789 19.972799 l
4.906389 19.972799 l
3.328889 14.0236 l
2.272789 14.0236 l
2.820919 14.43804 l
2.820919 19.972839 l
0.976019 19.972839 l
0.976019 8.07484 l
0.976019 6.37694 l
0.641799 5.9625 l
5.481399 5.975869 l
6.230059 5.975869 6.804899 6.550739 6.804899 7.299369 c
6.8048 7.299 l
h
8.850302 14.0909 m
9.398432 14.49197 l
9.398432 17.914471 l
11.550832 17.914471 l
11.550832 14.090971 l
8.850332 14.090971 l
8.850302 14.0909 l
h
9.398402 8.556 m
9.398402 11.965099 l
11.550802 11.965099 l
11.550802 8.1416 l
8.850302 8.1416 l
9.398402 8.556 l
h
13.395702 7.353 m
13.395702 11.697901 l
13.395702 12.446561 12.780732 13.021401 12.072203 13.021401 c
12.780763 13.021401 13.395702 13.636371 13.395702 14.3449 c
13.395702 18.703201 l
13.395702 19.45186 12.780732 20.026701 12.072203 20.026701 c
7.553503 20.026701 l
7.553503 6.430701 l
7.219283 6.029631 l
12.072183 6.029631 l
12.780743 6.029631 13.395682 6.644601 13.395682 7.353131 c
13.395702 7.353 l
h
15.481295 6.003 m
19.064194 6.003 l
19.064194 8.115299 l
15.441194 8.115299 l
15.989324 8.516369 l
15.935847 10.869268 15.935847 15.54847 15.989324 17.888069 c
19.064224 17.888069 l
19.064224 20.00037 l
15.481324 20.00037 l
14.732664 20.00037 14.157825 19.425501 14.157825 18.67687 c
14.157825 7.32687 l
14.157825 6.57821 14.732695 6.00337 15.481324 6.00337 c
15.481295 6.003 l
h
f
Q
q
[90.007111 0 0 90.019089 210.05447 3454.3308] cm
/DeviceRGB {} CS
[0.0392 0.0392 0.0392] SC
/DeviceRGB {} cs
[0.0392 0.0392 0.0392] sc
2.8209 11.9118 m
4.9733 11.9118 l
4.9733 8.074901 l
2.2728 8.074901 l
2.82093 8.489341 l
2.82093 11.91184 l
2.8209 11.9118 l
h
6.8048 7.299 m
6.8048 12.7001 l
6.8048 13.44876 6.22993 14.0236 5.4813 14.0236 c
5.22729 14.0236 l
6.804789 19.972799 l
4.906389 19.972799 l
3.328889 14.0236 l
2.272789 14.0236 l
2.820919 14.43804 l
2.820919 19.972839 l
0.976019 19.972839 l
0.976019 8.07484 l
0.976019 6.37694 l
0.641799 5.9625 l
5.481399 5.975869 l
6.230059 5.975869 6.804899 6.550739 6.804899 7.299369 c
6.8048 7.299 l
h
7.540105 6.43 m
7.205885 6.01556 l
12.459885 6.01556 l
12.459885 8.127859 l
8.836885 8.127859 l
9.385015 8.542299 l
9.385015 11.951399 l
11.550815 11.951399 l
11.550815 14.077099 l
8.836914 14.077099 l
9.385044 14.478168 l
9.385044 17.900669 l
12.459944 17.900669 l
12.459944 20.01297 l
7.540144 20.01297 l
7.540144 17.900669 l
7.540144 14.077169 l
7.540144 11.951469 l
7.540144 6.430069 l
7.540105 6.43 l
h
15.053482 17.9011 m
17.205883 17.9011 l
17.205883 8.1284 l
14.505383 8.1284 l
15.053513 8.54284 l
15.053513 17.90114 l
15.053482 17.9011 l
h
19.050783 7.34 m
19.050783 18.690001 l
19.050783 19.43866 18.462543 20.0135 17.713882 20.0135 c
13.208582 20.0135 l
13.208582 17.901199 l
13.208582 6.4302 l
12.874362 6.01576 l
17.713963 6.01576 l
18.449253 6.01576 19.050863 6.63073 19.050863 7.33926 c
19.050783 7.34 l
h
24.67918 14.0909 m
25.22731 14.49197 l
25.22731 17.914471 l
27.379711 17.914471 l
27.379711 14.090971 l
24.679211 14.090971 l
24.67918 14.0909 l
h
25.22728 8.556 m
25.22728 11.965099 l
27.379681 11.965099 l
27.379681 8.1416 l
24.67918 8.1416 l
25.22728 8.556 l
h
29.224579 7.353 m
29.224579 11.697901 l
29.224579 12.446561 28.60961 13.021401 27.901079 13.021401 c
28.60964 13.021401 29.224579 13.636371 29.224579 14.3449 c
29.224579 18.703201 l
29.224579 19.45186 28.60961 20.026701 27.901079 20.026701 c
23.38238 20.026701 l
23.38238 6.430701 l
23.048159 6.029631 l
27.901058 6.029631 l
28.609619 6.029631 29.224558 6.644601 29.224558 7.353131 c
29.224579 7.353 l
h
30.013367 6.43 m
29.679146 6.01556 l
34.933147 6.01556 l
34.933147 8.127859 l
31.310146 8.127859 l
31.858276 8.542299 l
31.858276 11.951399 l
34.024078 11.951399 l
34.024078 14.077099 l
31.310179 14.077099 l
31.858309 14.478168 l
31.858309 17.900669 l
34.933208 17.900669 l
34.933208 20.01297 l
30.013409 20.01297 l
30.013409 17.900669 l
30.013409 14.077169 l
30.013409 11.951469 l
30.013409 6.430069 l
30.013367 6.43 l
h
37.620358 15.8021 m
39.505356 15.8021 l
38.569527 8.1283 l
37.620358 15.8021 l
h
35.254009 20.026737 m
36.92511 6.430738 l
36.590889 6.029667 l
40.160389 6.029667 l
41.884991 20.026667 l
40.026691 20.026667 l
39.772682 17.914368 l
36.818184 17.900999 l
37.312836 18.288698 l
37.098934 20.026699 l
35.254036 20.026699 l
35.254009 20.026737 l
h
44.3717 11.9118 m
46.524101 11.9118 l
46.524101 8.074901 l
43.823601 8.074901 l
44.371731 8.489341 l
44.371731 11.91184 l
44.3717 11.9118 l
h
48.355602 7.299 m
48.355602 12.7001 l
48.355602 13.44876 47.780731 14.0236 47.032101 14.0236 c
46.778091 14.0236 l
48.355591 19.972799 l
46.457191 19.972799 l
44.879692 14.0236 l
43.823593 14.0236 l
44.371723 14.43804 l
44.371723 19.972839 l
42.526825 19.972839 l
42.526825 8.07484 l
42.526825 6.37694 l
42.192604 5.9625 l
47.032204 5.975869 l
47.780865 5.975869 48.355705 6.550739 48.355705 7.299369 c
48.355602 7.299 l
h
50.949203 17.9011 m
53.101604 17.9011 l
53.101604 8.1284 l
50.401104 8.1284 l
50.949234 8.54284 l
50.949234 17.90114 l
50.949203 17.9011 l
h
54.946503 7.34 m
54.946503 18.690001 l
54.946503 19.43866 54.358261 20.0135 53.609604 20.0135 c
49.104305 20.0135 l
49.104305 17.901199 l
49.104305 6.4302 l
48.770084 6.01576 l
53.609684 6.01576 l
54.344975 6.01576 54.946583 6.63073 54.946583 7.33926 c
54.946503 7.34 l
h
60.133701 6.003 m
63.716602 6.003 l
63.716602 8.115299 l
60.093601 8.115299 l
60.641731 8.516369 l
60.588257 10.869268 60.588257 15.54847 60.641731 17.888069 c
63.716633 17.888069 l
63.716633 20.00037 l
60.133732 20.00037 l
59.385071 20.00037 58.81023 19.425501 58.81023 18.67687 c
58.81023 7.32687 l
58.81023 6.57821 59.385101 6.00337 60.133732 6.00337 c
60.133701 6.003 l
h
66.310196 15.8021 m
68.195198 15.8021 l
67.259369 8.1283 l
66.310196 15.8021 l
h
63.943848 20.026737 m
65.614944 6.430738 l
65.280724 6.029667 l
68.85022 6.029667 l
70.574821 20.026667 l
68.716522 20.026667 l
68.462509 17.914368 l
65.508011 17.900999 l
66.002663 18.288698 l
65.788765 20.026699 l
63.943867 20.026699 l
63.943848 20.026737 l
h
72.526772 14.0909 m
73.074905 14.49197 l
73.074905 17.914471 l
75.227303 17.914471 l
75.227303 14.090971 l
72.526802 14.090971 l
72.526772 14.0909 l
h
73.074875 8.556 m
73.074875 11.965099 l
75.227272 11.965099 l
75.227272 8.1416 l
72.526772 8.1416 l
73.074875 8.556 l
h
77.072174 7.353 m
77.072174 11.697901 l
77.072174 12.446561 76.457207 13.021401 75.748672 13.021401 c
76.45723 13.021401 77.072174 13.636371 77.072174 14.3449 c
77.072174 18.703201 l
77.072174 19.45186 76.457207 20.026701 75.748672 20.026701 c
71.229973 20.026701 l
71.229973 6.430701 l
70.895752 6.029631 l
75.74865 6.029631 l
76.457207 6.029631 77.072151 6.644601 77.072151 7.353131 c
77.072174 7.353 l
h
79.719292 19.973263 m
77.87439 19.973263 l
77.87439 6.390263 l
77.540169 5.975822 l
79.719269 5.975822 l
79.719269 19.972822 l
79.719292 19.973263 l
h
80.467918 6.003 m
83.088219 6.003 l
84.799416 13.6367 l
84.799416 6.0164 l
86.631012 6.0164 l
86.631012 20.000401 l
84.34491 20.000401 l
82.647011 12.4068 l
82.647011 20.0138 l
80.802109 20.0138 l
80.802109 6.4178 l
80.467918 6.003 l
h
87.700531 6.43 m
87.36631 6.01556 l
92.620308 6.01556 l
92.620308 8.127859 l
88.997307 8.127859 l
89.545441 8.542299 l
89.545441 11.951399 l
91.711243 11.951399 l
91.711243 14.077099 l
88.997345 14.077099 l
89.545471 14.478168 l
89.545471 17.900669 l
92.620369 17.900669 l
92.620369 20.01297 l
87.700569 20.01297 l
87.700569 17.900669 l
87.700569 14.077169 l
87.700569 11.951469 l
87.700569 6.430069 l
87.700531 6.43 l
h
94.759315 8.102 m
92.767319 8.102 l
92.767319 5.9763 l
98.596222 5.9763 l
98.596222 8.102 l
96.056122 8.102 l
96.604248 8.50307 l
96.604248 19.98707 l
94.759346 19.98707 l
94.759346 8.10207 l
94.759315 8.102 l
h
104.786102 7.34 m
104.786102 10.2277 l
102.954506 10.2277 l
102.954506 8.1154 l
100.254005 8.1154 l
100.788765 8.529841 l
100.788765 10.22774 l
104.786064 15.13414 l
104.786064 17.246441 l
104.786064 18.69034 l
104.786064 19.398901 104.211197 20.01384 103.462563 20.01384 c
100.280762 20.01384 l
99.532104 20.01384 98.95726 19.39887 98.95726 18.69034 c
98.95726 15.70904 l
100.788857 15.70904 l
100.788857 17.901539 l
102.954659 17.901539 l
102.954659 15.789239 l
98.957359 10.882839 l
98.957359 7.340039 l
98.957359 6.591379 99.532227 6.016539 100.280861 6.016539 c
103.462662 6.016539 l
104.211319 6.016539 104.786163 6.591409 104.786163 7.340039 c
104.786102 7.34 l
h
f
Q
q
[22.659435 0 0 22.662449 2533.999 5409.5132] cm
/DeviceRGB {} CS
[0.0392 0.0392 0.0392] SC
/DeviceRGB {} cs
[0.0392 0.0392 0.0392] sc
0.78877 6.39 m
0.45455 5.97556 l
5.70855 5.97556 l
5.70855 8.08786 l
2.08555 8.08786 l
2.63368 8.5023 l
2.63368 11.924801 l
4.78608 11.924801 l
4.78608 14.037101 l
2.08558 14.037101 l
2.63371 14.451541 l
2.63371 19.97294 l
0.78881 19.97294 l
0.78881 6.38994 l
0.78877 6.39 l
h
12.850625 19.973263 m
11.005725 19.973263 l
11.005725 6.390263 l
10.671505 5.975822 l
12.850605 5.975822 l
12.850605 19.972822 l
12.850625 19.973263 l
h
18.254652 6.003 m
20.874952 6.003 l
22.586153 13.6367 l
22.586153 6.0164 l
24.417753 6.0164 l
24.417753 20.000401 l
22.131653 20.000401 l
20.433752 12.4068 l
20.433752 20.0138 l
18.588852 20.0138 l
18.588852 6.4178 l
18.254652 6.003 l
h
30.14267 6.43 m
29.808449 6.01556 l
35.06245 6.01556 l
35.06245 8.127859 l
31.439449 8.127859 l
31.987579 8.542299 l
31.987579 11.951399 l
34.153381 11.951399 l
34.153381 14.077099 l
31.439482 14.077099 l
31.987612 14.478168 l
31.987612 17.900669 l
35.062511 17.900669 l
35.062511 20.01297 l
30.142712 20.01297 l
30.142712 17.900669 l
30.142712 14.077169 l
30.142712 11.951469 l
30.142712 6.430069 l
30.14267 6.43 l
h
49.239582 6.003 m
52.822483 6.003 l
52.822483 8.115299 l
49.199482 8.115299 l
49.747612 8.516369 l
49.694138 10.869268 49.694138 15.54847 49.747612 17.888069 c
52.822514 17.888069 l
52.822514 20.00037 l
49.239613 20.00037 l
48.490952 20.00037 47.916111 19.425501 47.916111 18.67687 c
47.916111 7.32687 l
47.916111 6.57821 48.490982 6.00337 49.239613 6.00337 c
49.239582 6.003 l
h
59.977833 17.9011 m
62.130234 17.9011 l
62.130234 6.0031 l
63.975132 6.0031 l
63.975132 18.677101 l
63.975132 19.42576 63.360161 20.000601 62.65163 20.000601 c
59.46983 20.013969 l
58.721169 20.013969 58.146328 19.42573 58.146328 18.677069 c
58.146328 6.418069 l
58.132957 6.418069 l
57.798737 6.003629 l
59.977837 6.003629 l
59.977837 17.901628 l
59.977833 17.9011 l
h
75.127914 7.34 m
75.127914 10.2277 l
73.296318 10.2277 l
73.296318 8.1154 l
70.595818 8.1154 l
71.130577 8.529841 l
71.130577 10.22774 l
75.127876 15.13414 l
75.127876 17.246441 l
75.127876 18.69034 l
75.127876 19.398901 74.553009 20.01384 73.804375 20.01384 c
70.622574 20.01384 l
69.873917 20.01384 69.299072 19.39887 69.299072 18.69034 c
69.299072 15.70904 l
71.130669 15.70904 l
71.130669 17.901539 l
73.296471 17.901539 l
73.296471 15.789239 l
69.299171 10.882839 l
69.299171 7.340039 l
69.299171 6.591379 69.874039 6.016539 70.622673 6.016539 c
73.804474 6.016539 l
74.553131 6.016539 75.127975 6.591409 75.127975 7.340039 c
75.127914 7.34 l
h
82.109474 8.102 m
80.117477 8.102 l
80.117477 5.9763 l
85.946381 5.9763 l
85.946381 8.102 l
83.406281 8.102 l
83.954407 8.50307 l
83.954407 19.98707 l
82.109505 19.98707 l
82.109505 8.10207 l
82.109474 8.102 l
h
92.91468 17.9011 m
95.080482 17.9011 l
95.080482 8.1284 l
92.379982 8.1284 l
92.914742 8.54284 l
92.914742 17.90114 l
92.91468 17.9011 l
h
96.91198 7.34 m
96.91198 18.690001 l
96.91198 19.43866 96.337112 20.0135 95.588478 20.0135 c
92.406677 20.0135 l
91.65802 20.0135 91.083176 19.438631 91.083176 18.690001 c
91.083176 7.34 l
91.083176 6.63144 91.658043 6.0165 92.406677 6.0165 c
95.588478 6.0165 l
96.337135 6.0165 96.91198 6.63147 96.91198 7.34 c
h
102.04866 6.016 m
105.136864 6.016 l
106.380165 10.7353 l
107.636864 6.016 l
110.390862 6.016 l
110.377495 20.013 l
108.545898 20.013 l
108.545898 9.746 l
106.380096 17.8743 l
106.380096 17.887669 l
106.380096 17.8743 l
106.380096 17.887669 l
106.380096 17.8743 l
104.227699 9.746 l
104.227699 20.013 l
102.382797 20.013 l
102.382797 6.417001 l
102.04866 6.016 l
h
124.955727 6.003 m
128.53862 6.003 l
128.53862 8.115299 l
124.915619 8.115299 l
125.463745 8.516369 l
125.410271 10.869268 125.410271 15.54847 125.463745 17.888069 c
128.538651 17.888069 l
128.538651 20.00037 l
124.95575 20.00037 l
124.207092 20.00037 123.632248 19.425501 123.632248 18.67687 c
123.632248 7.32687 l
123.632248 6.57821 124.207115 6.00337 124.95575 6.00337 c
124.955727 6.003 l
h
135.787628 15.8021 m
137.672623 15.8021 l
136.736786 8.1283 l
135.787628 15.8021 l
h
133.42128 20.026737 m
135.092377 6.430738 l
134.758163 6.029667 l
138.327667 6.029667 l
140.052261 20.026667 l
138.193954 20.026667 l
137.939941 17.914368 l
134.985443 17.900999 l
135.480087 18.288698 l
135.26619 20.026699 l
133.421295 20.026699 l
133.42128 20.026737 l
h
146.659592 14.0909 m
147.207718 14.49197 l
147.207718 17.914471 l
149.360123 17.914471 l
149.360123 14.090971 l
146.659622 14.090971 l
146.659592 14.0909 l
h
147.207703 8.556 m
147.207703 11.965099 l
149.360107 11.965099 l
149.360107 8.1416 l
146.659607 8.1416 l
147.207703 8.556 l
h
151.205002 7.353 m
151.205002 11.697901 l
151.205002 12.446561 150.590027 13.021401 149.8815 13.021401 c
150.590057 13.021401 151.205002 13.636371 151.205002 14.3449 c
151.205002 18.703201 l
151.205002 19.45186 150.590027 20.026701 149.8815 20.026701 c
145.362793 20.026701 l
145.362793 6.430701 l
145.02858 6.029631 l
149.881485 6.029631 l
150.590042 6.029631 151.204987 6.644601 151.204987 7.353131 c
151.205002 7.353 l
h
158.507523 19.973263 m
156.662628 19.973263 l
156.662628 6.390263 l
156.328415 5.975822 l
158.507507 5.975822 l
158.507507 19.972822 l
158.507523 19.973263 l
h
163.911545 6.003 m
166.531845 6.003 l
168.24304 13.6367 l
168.24304 6.0164 l
170.07465 6.0164 l
170.07465 20.000401 l
167.78854 20.000401 l
166.090637 12.4068 l
166.090637 20.0138 l
164.245743 20.0138 l
164.245743 6.4178 l
163.911545 6.003 l
h
175.79956 6.43 m
175.46535 6.01556 l
180.71935 6.01556 l
180.71935 8.127859 l
177.09634 8.127859 l
177.64447 8.542299 l
177.64447 11.951399 l
179.81027 11.951399 l
179.81027 14.077099 l
177.09637 14.077099 l
177.6445 14.478168 l
177.6445 17.900669 l
180.71941 17.900669 l
180.71941 20.01297 l
175.79961 20.01297 l
175.79961 17.900669 l
175.79961 14.077169 l
175.79961 11.951469 l
175.79961 6.430069 l
175.79956 6.43 l
h
187.51375 8.102 m
185.52174 8.102 l
185.52174 5.9763 l
191.35065 5.9763 l
191.35065 8.102 l
188.81055 8.102 l
189.35867 8.50307 l
189.35867 19.98707 l
187.51378 19.98707 l
187.51378 8.10207 l
187.51375 8.102 l
h
198.61308 11.9118 m
200.76549 11.9118 l
200.76549 8.074901 l
198.06499 8.074901 l
198.61311 8.489341 l
198.61311 11.91184 l
198.61308 11.9118 l
h
202.59698 7.299 m
202.59698 12.7001 l
202.59698 13.44876 202.02211 14.0236 201.27348 14.0236 c
201.01947 14.0236 l
202.59697 19.972799 l
200.69856 19.972799 l
199.12106 14.0236 l
198.06496 14.0236 l
198.61308 14.43804 l
198.61308 19.972839 l
196.76819 19.972839 l
196.76819 8.07484 l
196.76819 6.37694 l
196.43398 5.9625 l
201.27357 5.975869 l
202.02223 5.975869 202.59708 6.550739 202.59708 7.299369 c
202.59698 7.299 l
h
207.2925 6.003 m
209.43149 6.003 l
210.91548 11.9388 l
212.38608 6.003 l
214.28448 6.003 l
211.85129 15.7356 l
211.82455 15.85592 l
211.82455 20.01372 l
209.99295 20.01372 l
209.99295 15.842619 l
209.96622 15.735669 l
207.64001 6.417469 l
207.2925 6.003 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
